@using TFA.Application.Interfaces.Services
@using TFA.Domain.Models
@inject IStateManager StateManager;
@inject IBaseDataService baseDataService;

<MudContainer Class="mt-16">

    @if(IsLoading)
    {
        <MudCardContent>
            <MudSkeleton Width="100%" Height="100px" />
            <MudCardActions>
                <MudSkeleton Width="400px" Height="200px" />
                <MudSkeleton Width="400px" Height="200px" Class="ml-4" />
                <MudSkeleton Width="400px" Height="200px" Class="ml-4" />
            </MudCardActions>
            <MudCardActions>
                <MudSkeleton Width="400px" Height="200px" />
                <MudSkeleton Width="400px" Height="200px" Class="ml-4" />
                <MudSkeleton Width="400px" Height="200px" Class="ml-4" />
            </MudCardActions>
        </MudCardContent>
    }
    else
    {
        <MudText>@(BaseData?.Players[0].DisplayName)</MudText>
    }

</MudContainer>

@code {
    private bool IsLoading = true;
    private FantasyBaseData? BaseData;

    protected override void OnInitialized()
    {
        StateManager.StateChanged += async (key) =>
        {
            if (key == StateKeys.SelectedFantasyType)
            {
                StateManager.TrySet(StateKeys.IsLoading, true);
                BaseData = (await baseDataService.GetData(StateManager.TryGet<FantasyType>(StateKeys.SelectedFantasyType))).Value;
                StateManager.TrySet(StateKeys.IsLoading, false);
            }
            else if (key == StateKeys.IsLoading)
            {
                IsLoading = StateManager.TryGet<bool>(StateKeys.IsLoading);
                StateHasChanged();
            }
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            FantasyType fantasyType = StateManager.TryGet<FantasyType>(StateKeys.SelectedFantasyType);
            BaseData ??= (await baseDataService.GetData(fantasyType)).Value;

            await Task.Delay(1000);

            StateManager.TrySet(StateKeys.IsLoading, false);
        }
    }
}