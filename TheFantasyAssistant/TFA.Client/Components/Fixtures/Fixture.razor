<div class="fixture__container" style="width: @GetWidth()">
    @foreach (FixtureViewModel fixture in Fixtures)
    {
        <MudText class="@ConvertFixtureDifficutyToClassName(fixture.FixtureDifficulty)" Typo="Typo.body2" Align="Align.Center">
            @($"{fixture.Opponent} ({ (fixture.IsHome ? 'H' : 'A') })")
        </MudText>
    }  
</div>

<style>
    .fixture__container {
        width: 100%;
        display: flex;
        gap: 3px;
    }

    .fixture__container > * {
        width: 100%;
        max-width: 70px;
        padding: 5px;
        border-radius: 3px;
        white-space: nowrap;
        color: black;
    }

    .hard {
        background-color: rgba(221, 46, 68, 1);
    }

    .medium {
        background-color: rgba(230, 231, 232, 1);
    }

    .easy {
        background-color: rgba(120, 177, 89, 1);
    }
</style>

@code {
    [Parameter]
    public IReadOnlyList<FixtureViewModel> Fixtures { get; set; } = [];

    private string ConvertFixtureDifficutyToClassName(int fixtureDifficulty)
        => fixtureDifficulty switch
        {
            > 3 => "hard",
            < 3 => "easy",
            _ => "medium"
        };

    private int GetWidth() => Fixtures.Count > 0
            ? (int)(100 / Fixtures.Count)
            : 0;
}
