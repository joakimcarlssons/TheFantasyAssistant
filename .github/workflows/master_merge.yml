# Workflow performs a build and deploy on affected services upon merge

name: Builds and deploy to Azure upon merge

on:
  push:
    branches:
      - master
  workflow_dispatch:
    
env:
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'

jobs:
  check_changed_services:
    name: Check Changed Services
    outputs:
      files: ${{ steps.check_files.outputs.files }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout codebase
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check Modified Files
        id: check_files
        run: |
          git diff --name-only HEAD^ HEAD > files.txt
          echo "::set-output name=files::$(tr -s '\n ' ',' < files.txt)"

# BUILD
  build_scheduler:
    name: 'Build TFA Scheduler'
    needs: check_changed_services
    if: contains(needs.check_changed_services.outputs.files, 'TheFantasyAssistant/TFA.Scheduler')
    runs-on: ubuntu-latest
    env:
      DOTNET_VERSION: '6.0.x'
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Set up .NET ${{ env.DOTNET_VERSION }} environment'
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          include-prerelease: true
      
      - name: Build
        run: dotnet build "./TheFantasyAssistant/TFA.Scheduler/TFA.Scheduler.csproj" -c Release

      - name: Publish
        run: dotnet publish "./TheFantasyAssistant/TFA.Scheduler/TFA.Scheduler.csproj" -c Release -o ${{env.DOTNET_ROOT}}/tfascheduler

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfa-scheduler
          path: ${{env.DOTNET_ROOT}}/tfascheduler
  ##
  # build_scraper:
  #   name: 'Build TFA Scraper'
  #   needs: check_changed_services
  #   if: contains(needs.check_changed_services.outputs.files, 'TheFantasyAssistant/TFA.Scraper')
  #   runs-on: ubuntu-latest
  #   env:
  #     DOTNET_VERSION: '6.0.x'
  #   steps:
  #     - name: 'Checkout'
  #       uses: actions/checkout@v4

  #     - name: 'Set up .NET ${{ env.DOTNET_VERSION }} environment'
  #       uses: actions/setup-dotnet@v1
  #       with:
  #         dotnet-version: ${{ env.DOTNET_VERSION }}
  #         include-prerelease: true
      
  #     - name: Build
  #       run: dotnet build "./TheFantasyAssistant/TFA.Scraper/TFA.Scraper.csproj" -c Release

  #     - name: Publish
  #       run: dotnet publish "./TheFantasyAssistant/TFA.Scraper/TFA.Scraper.csproj" -c Release -o ${{env.DOTNET_ROOT}}/tfascraper

  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: tfa-scraper
  #         path: ${{env.DOTNET_ROOT}}/tfascraper
  ##
  build_api:
    name: 'Build TFA API'
    needs: check_changed_services
    runs-on: ubuntu-latest
    env:
      DOTNET_VERSION: '8.0.x'
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Set up .NET ${{ env.DOTNET_VERSION }} environment'
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          include-prerelease: true
      
      - name: Build
        run: dotnet build "./TheFantasyAssistant/TFA.Api/TFA.Api.csproj" -c Release

      - name: Publish
        run: dotnet publish "./TheFantasyAssistant/TFA.Api/TFA.Api.csproj" -c Release -o ${{env.DOTNET_ROOT}}/tfaapi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfa-api
          path: ${{env.DOTNET_ROOT}}/tfaapi
    ##
  build_client:
    name: 'Build TFA Client'
    needs: check_changed_services
    #if: contains(needs.check_changed_services.outputs.files, 'TheFantasyAssistant/TFA.Client')
    runs-on: ubuntu-latest
    env:
      DOTNET_VERSION: '8.0.x'
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Set up .NET ${{ env.DOTNET_VERSION }} environment'
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          include-prerelease: true
      
      - name: Build
        run: dotnet build "./TheFantasyAssistant/TFA.Client/TFA.Client.csproj" -c Release

      - name: Publish
        run: dotnet publish "./TheFantasyAssistant/TFA.Client/TFA.Client.csproj" -c Release -o ${{env.DOTNET_ROOT}}/tfaclient

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfa-client
          path: ${{env.DOTNET_ROOT}}/tfaclient

# DEPLOY
  deploy_scheduler:
    name: 'Deploy TFA Scheduler'
    runs-on: ubuntu-latest
    needs: build_scheduler
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: tfa-scheduler

      - name: 'Deploy to Azure (Functions)'
        id: fa
        uses: azure/functions-action@v1
        with:
          app-name: 'tfa-scheduler'
          slot-name: 'Production'
          package: .
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_2EE027FA19A6469BB73EE1499F2FAD19 }}
  # ##
  # deploy_scraper:
  #   name: 'Deploy TFA Scraper'
  #   runs-on: ubuntu-latest
  #   needs: build_scraper
  #   steps:
  #     - name: Download artifact from build job
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: tfa-scraper

  #     - name: 'Deploy to Azure (Functions)'
  #       id: fa
  #       uses: azure/functions-action@v1
  #       with:
  #         app-name: 'tfa-scraper'
  #         slot-name: 'Production'
  #         package: .
  #         publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_876682E1B76B4F2C8D7089960E5AC33E }}
  ##
  deploy_api:
    name: 'Deploy TFA API'
    runs-on: ubuntu-latest
    needs: build_api
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: tfa-api
      
      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'thefantasyassistant'
          slot-name: 'Production'
          package: .
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_DD5586E8705E4A7EBAF0BE011919DED1 }}
  ##
  deploy_client:
    name: 'Deploy TFA Client'
    runs-on: ubuntu-latest
    needs: build_client
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: tfa-client
      
      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'fantasyassistant'
          slot-name: 'Production'
          package: .
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_286B97DC9EDA4BA3AF3E1DBE19279E0E }}

